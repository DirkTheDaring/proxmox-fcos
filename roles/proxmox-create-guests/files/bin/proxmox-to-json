#!/usr/bin/env python3
import sys
import re
import os
import json

PVE_STORAGE_CONFIG="/etc/pve/storage.cfg"
QEMU_SERVER_CONFIG_DIR="/etc/pve/qemu-server"

class STORAGECONFIG:
  def parse(self):

   item = re.compile(r'(^[a-z]+):[ |\t]([^ \t\n]+)')
   vgname = re.compile(r'^[ |\t]+vgname[ |\t]+(.*)')

   fd = open(PVE_STORAGE_CONFIG)
   hash={}
   for line in fd:
     mo = item.search(line)
     if mo:
       _type,name = mo.groups()
     mo = vgname.search(line)
     vg=""
     if mo:
       vg = mo.groups()[0]
       hash[name]=vg

   fd.close()
   return hash

class QMCONFIG:
  def parse(self, fd, my_dict, lookup):
   re_mac = re.compile(r'^(net[0-9]+):.*([0-9A-F]{2,2}(:[0-9A-F]{2,2}){5,5})')
   re_drives = re.compile(r'^(virtio[0-9]+|scsi[0-9]+|ide[0-9]+|sata[0-9]+):[ |\t]+(.*)')
   re_boot_order = re.compile(r'^boot:.*order=([^ \n]+)')
   re_bootdisk = re.compile(r'^bootdisk:[ |\t]+([^ \n]+)')

   for line in fd:
     mo = re_mac.search(line)
     if mo:
       net = mo.groups()[0]
       mac = mo.groups()[1]
       my_dict[net + '_macaddr'] = mac.lower()

     mo = re_drives.search(line)
     if mo:
       drive_name, value = mo.groups()
       array = value.split(",")
       # first item is always storage
       url = array.pop(0)
       sub_dict = {}
       for item in array:
         key,val = item.split("=")
         sub_dict[key]=val

       if url == 'none':
           continue

       volume, disk = url.split(":")
       my_dict[drive_name + "_storage"] = volume
       if volume in lookup:
         real_name = lookup[volume]
         path = os.path.join('/dev',real_name,disk)
         my_dict[drive_name + '_path']=path
       else:
          continue
       for key,value in sub_dict.items():
           my_dict[drive_name + "_" + key ] = value

     mo = re_boot_order.search(line)
     if mo:
          drives = mo.groups()[0]
          boot_order = drives.split(";")
          my_dict['boot_order'] = boot_order
       
     mo = re_bootdisk.search(line)
     if mo:
          my_dict['bootdisk'] = mo.groups()[0]


sc = STORAGECONFIG()
qm = QMCONFIG()
hash = sc.parse()

result_hash   = {}
qemu_machines = {}
config_files  = os.listdir(QEMU_SERVER_CONFIG_DIR)

config_files = list(filter(lambda x: x.endswith(".conf"), config_files ))
for config_file in config_files:
  config_file_path= os.path.join(QEMU_SERVER_CONFIG_DIR, config_file)

  my_dict = {}

  fd = open(config_file_path)
  qm.parse(fd, my_dict, hash )
  fd.close()

  config_id = config_file.split(".")[0]
  result_hash[config_id]= my_dict

print(json.dumps(result_hash))
