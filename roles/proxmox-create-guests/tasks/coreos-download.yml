- set_fact:
    download_hostname: "{{ ansible_play_hosts_all[0] }}"


# FIXME download and target dir might be different
# for the fcos caching, maybe we should just have a caching directory
 
- block:
  - name: "print download hostname"
    debug:
      msg: "{{ download_hostname }} == {{ inventory_hostname }}"

  - file:
      path:  "{{ fcos_cachedir }}"
      owner: root
      group: root
      mode:  '0755'
      state: directory
  
  - file:
      path:  "{{ fcos_downloaddir }}/{{ item }}"
      owner: root
      group: root
      mode:  '0755'
      state: directory
    loop: "{{ fcos_channels }}"
   
  - name: "debug execution" 
    debug:
      msg: "{{ download_hostname }}"

  - name: "stat cached json files"
    stat:
      path: "{{ fcos_cachedir }}/{{ item }}.json"
    loop: "{{ fcos_channels }}"
    register: json_files

#  - debug:
#      msg: "{{ item.stat.exists  }}"
#    loop:  "{{ json_files.results }}"
#    loop_control:
#      index_var: i
#      label: "{{ item.invocation.module_args.path if 'invocation' in item  }}"

# the uri download is a constant source of troubles
# a) its not availabe 404
# b) its moved (endless loop)
# c) it not there at all
# d) you have queried to much
  - name: __xxx__
    #set_fact:
    #  xxx: "{{ item.stat.exists }}"
    uri:
      url:  "https://builds.coreos.fedoraproject.org/streams/{{ fcos_channels[i] }}.json"
      dest: "{{ fcos_cachedir }}/{{ fcos_channels[i] }}.json"
    loop:  "{{ json_files.results }}"
    loop_control:
      index_var: i
      label: "{{ item.invocation.module_args.path if 'invocation' in item  }}"
    when:  not item.stat.exists or ((ansible_date_time.epoch|int - item.stat.mtime) > (fcos_upgrade_days * 60 * 60 * 24))
    ignore_errors: yes
    register: url_result

#  - name: "stat cached json files again (if they do now exist)"
#    stat:
#      path: "{{ fcos_cachedir }}/{{ item }}.json"
#    loop: "{{ fcos_channels }}"
#    register: json_files

  # it will fail on
  # a) file not existing
  # b) content no json
  # --> therefore ignore errors in slurp, we evaualte this later
  - slurp:
      path: "{{ fcos_cachedir }}/{{ fcos_channels[i] }}.json"
    loop: "{{ fcos_channels }}"
    loop_control:
      index_var: i
      label: "{{ fcos_channels[i] }}"
    ignore_errors: yes
    register: slurp_result

#  - debug:
#      msg: "{{ (item.content|b64decode|from_json) if not item.failed else '' }}"
#    loop: "{{ slurp_result.results }}"

  - set_fact:
      fcos_downloads: "{{ fcos_downloads|default([])|union([item.content|b64decode|from_json] if not item.failed else [] ) }}"
    loop: "{{ slurp_result.results }}"
    loop_control:
      index_var: i
      label: "{{ fcos_channels[i] }}"

#  - debug:
#      msg: "{{ item }}"
#    loop: "{{ fcos_downloads }}"

#  - fail:
##      msg: "EPIC FAILURE"

  - set_fact:
      download_url:      "{{ item | json_query('architectures.x86_64.artifacts.metal.formats.\"raw.xz\".disk.location') }}"
      filename:         "{{ item | json_query('architectures.x86_64.artifacts.metal.formats.\"raw.xz\".disk.location') | basename }}"
      checksum:   "sha256:{{ item | json_query('architectures.x86_64.artifacts.metal.formats.\"raw.xz\".disk.sha256') }}"
    loop: "{{ fcos_downloads|list }}"
    loop_control:
      label: "{{ item.stream }}"
    register: fcos_download_result

#  - debug:
#      msg: "{{ item.ansible_facts }}"
#    loop: "{{ fcos_download_result.results }}"
#    loop_control:
#      index_var: i
#      label: "{{ item.ansible_facts.filename }}"

  - set_fact:
      fcos_latest_versions: "{{ fcos_latest_versions|default({}) |combine( {  fcos_channels[i]: item.ansible_facts }) }}"
    loop: "{{ fcos_download_result.results }}"
    loop_control:
      index_var: i
      label: "{{ item.ansible_facts.filename }}"

  - name: the latests versions 
    debug:
      msg: "{{ fcos_latest_versions }}"

  - name: show list of guest which require fcos
    debug:
      msg: "{{ item }}"
    when: "'os_name' in hostvars[item] and hostvars[item].os_name == 'fcos'"
    loop: "{{ groups[proxmox_guests_group] }}"

  - name: create list of guest which require fcos, with channel, version, download_url and filename
    set_fact:
      channel: "{{ hostvars[item].fcos_channel|default(fcos_channel)   }}"
      download_url: >-
       {% if not 'os_version' in hostvars[item] %}{{fcos_latest_versions[(hostvars[item].fcos_channel|default(fcos_channel))].download_url}}{% else %}https://builds.coreos.fedoraproject.org/prod/streams/{{ hostvars[item].fcos_channel|default(fcos_channel) }}/builds/{{ hostvars[item].os_version|default('xxx') }}/x86_64/fedora-coreos-{{ hostvars[item].os_version|default('xxx') }}-metal.x86_64.raw.xz{% endif %}
      filename: >-
       {% if not 'os_version' in hostvars[item] %}{{fcos_latest_versions[(hostvars[item].fcos_channel|default(fcos_channel))].filename}}{% else %}fedora-coreos-{{ hostvars[item].os_version|default('xxx') }}-metal.x86_64.raw.xz{% endif %}
      checksum: >-
       {% if not 'os_version' in hostvars[item] %}{{fcos_latest_versions[(hostvars[item].fcos_channel|default(fcos_channel))].checksum}}{% endif %}

    when: "'os_name' in hostvars[item] and hostvars[item].os_name == 'fcos'"
    loop: "{{ groups[proxmox_guests_group] }}"
    register: fcos_download_result

  - name: create a dict, which has unique entries for each channel+version so that a download is only considered once later
    set_fact:
      fcos_required_versions_dict: "{{ fcos_required_versions_dict|default({}) | combine( {  item.ansible_facts.channel + item.ansible_facts.filename: item.ansible_facts }) }}"
    when: "'ansible_facts' in item and 'filename' in item.ansible_facts and 'channel' in item.ansible_facts"
    loop: "{{ fcos_download_result.results }}"
    loop_control:
      index_var: i
      label: "{{ item.ansible_facts.filename if 'ansible_facts' in item else '' }}"

  - name: result
    debug:
      msg: "{{ fcos_required_versions_dict  }}"

  - debug:
      msg: "{{ fcos_required_versions_dict| dict2items }}"

  - name: create list of to be downloaded
    set_fact:
      fcos_required_versions: "{{ fcos_required_versions|default([])|union([item.value]) }}"
    loop: "{{ fcos_required_versions_dict|default({})| dict2items }}"
#    loop_control:
#      index_var: i
#      label: "{{ item.key }}"
#
  - name: result2
    debug:
      msg: "{{ fcos_required_versions }}"

#  - fail:
#      msg: "now failed"
#
 
  - name: check if not already there 
    stat:
      path: "{{ fcos_downloaddir }}/{{ item.channel }}/{{ item.filename }}"
    loop: "{{ fcos_required_versions  }}"
    register: fcos_coreos_images
    loop_control:
      label: "{{ item.filename }}"
 
  - name: download image if it doesn't exist or checksum does not match
    get_url:
      url:  "{{ fcos_required_versions[i].download_url }}"
      dest: "{{ fcos_downloaddir }}/{{ fcos_required_versions[i].channel }}/{{ fcos_required_versions[i].filename }}"
      force:    "no"
    when: not item.stat.exists
    loop:  "{{ fcos_coreos_images.results }}"
    loop_control:
      index_var: i
      #label: "{{ item.stat.path }}"

  when: inventory_hostname == download_hostname

- name: set 'fcos_required_versions' for all hosts
  set_fact:
    fcos_required_versions: "{{ hostvars[download_hostname].fcos_required_versions }}"
  when: inventory_hostname != download_hostname


- name: set 'fcos_latest_versions' for all hosts
  set_fact:
    fcos_latest_versions: "{{ hostvars[download_hostname].fcos_latest_versions }}"
  when: inventory_hostname != download_hostname


