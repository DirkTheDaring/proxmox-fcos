#  Dynamic Global variables which will be used in subsequent scripts

#  fcos_flash_list         list of hosts which will be flashed

#  fcos_download_url       download_url for baremetal image
#  fcos_download_checksum  checksum for baremetal image

#  fcos_fcct_download_url  fcct down load url
#  fcos_fcct_filename      fcct filename
#
#  proxmox                 contains mac_address and real path to drivee


- name: create fcos_flash_list
  set_fact:
    fcos_flash_list: "{{ fcos_flash_list + [ hostvars[item] ] }}"
  loop: >- 
    {{ hostvars
       |filter_child_dictionary('kvm_host', inventory_hostname)
       |filter_child_dictionary('os_name',  'fcos' )
       |filter_child_dictionary('flash',    'True' )
       |list 
    }}

- name: report fcos_flash_list
  debug:
    msg: "{{ fcos_flash_list }}"
    verbosity: 2

- name: validate channel name 
  assert: { that: "fcos_channel in [ 'stable', 'next', 'testing' ]" }

- uri: 
    url:            "https://builds.coreos.fedoraproject.org/streams/{{ fcos_channel }}.json"
    #body_format:    json
    return_content: no     # json content will still be recorded
  register: fcos_streams   #.json.assets

# jq -r '.architectures.x86_64.artifacts.metal.formats["raw.xz"].disk.location'

# Issues with json parsing --> you need to_json|from_json 
# see https://github.com/ansible/ansible/issues/27299

- set_fact:
    fcos_download_url: "{{ fcos_streams.json|to_json| from_json |json_query('architectures.x86_64.artifacts.metal.formats.\"raw.xz\".disk.location') }}"
    fcos_download_checksum: "sha256:{{ fcos_streams.json|to_json|from_json|json_query('architectures.x86_64.artifacts.metal.formats.\"raw.xz\".disk.sha256') }}"
  when: fcos_download_url == ""

- set_fact:
    fcos_filename: "{{ fcos_download_url| basename }}"

- set_fact:
    # remove fcos_streams variable
    fcos_streams:      

- debug:
    msg: "{{ fcos_filename }}"
    verbosity: 2

- uri: 
    url:            "https://api.github.com/repos/coreos/fcct/releases/latest"
    body_format:    json
    return_content: no          # json content will still be recorded
  register: fcos_fcct_releases  #.json.assets

- set_fact:
    fcos_fcct_download_url: "{{ fcos_fcct_releases.json|to_json|from_json|json_query(\"assets[?name=='fcct-x86_64-unknown-linux-gnu'].browser_download_url|@[0]\") }}"
    fcos_fcct_filename: 'fcct-x86_64-unknown-linux-gnu' 

- set_fact:
    # remove fcos_fcct_release
    fcos_fcct_releases: 

- debug:
    msg: "{{ fcos_fcct_download_url }}"
    verbosity: 2

- debug:
    msg: "{{ fcos_fcct_filename }}"
    verbosity: 2


- name: Create a directory if it does not exist
  file:
    path:  "{{ item }}"
    state: directory
    mode: '0755'
  loop: 
  - "{{ fcos_tmp_dir }}"
  - "{{ fcos_tmp_dir }}/bin"

- name: create necessary files
  copy:
    src:   "{{ item }}"
    dest:  "{{ fcos_tmp_dir }}/{{ item }}"
    owner: root
    group: root
    mode:  0755
  loop:
  - "bin/proxmox-to-json"

- name: Create variable from command
  command: "{{ fcos_tmp_dir  }}/bin/proxmox-to-json"
  register: proxmox_command
  changed_when: false

- set_fact:
    proxmox: "{{ proxmox_command.stdout | from_json }}"

- set_fact:
    # remove
    proxmox_command: 

- debug:
    msg: "{{ proxmox }}"
    verbosity: 2

#- debug:
#    msg: "{{ proxmox['100'].sata0_path }}"


